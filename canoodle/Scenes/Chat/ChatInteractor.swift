//
//  ChatInteractor.swift
//  MadCollab
//
//  Created by Appineers India on 17/05/20.
//  Copyright (c) 2020 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ChatBusinessLogic
{
    func getChats(userId: String)
    func sendMessage(userId: String, firebaseId: String, message: String)
    func setConnection(userId: String, type: String)
    func reportUser(userId: String, message: String)
    func deleteMessage(chat: Chat)
}

protocol ChatDataStore
{
  //var name: String { get set }
}

class ChatInteractor: ChatBusinessLogic, ChatDataStore
{
  var presenter: ChatPresentationLogic?
  var worker: ChatWorker?
  //var name: String = ""
  
  // MARK: Do something
  func getChats(userId: String) {
      worker = ChatWorker()
    worker?.getChats(userId: userId) { response in
          //self.presenter?.presentChats(response: response)
      }
    }
    
    func sendMessage(userId: String, firebaseId: String, message: String) {
        worker = ChatWorker()
        worker?.sendMessage(userId: userId, firebaseId: firebaseId, message: message) { response in
            self.presenter?.presentSendMessageResponse(response: response)
        }
    }
    
    func setConnection(userId: String, type: String) {
          worker = ChatWorker()
        worker?.setConnection(userId: userId, type: type) { response in
              self.presenter?.presentSetConnectionResponse(response: response)
          }
    }
    
    func reportUser(userId: String, message: String) {
        worker = ChatWorker()
        worker?.reportUser(userId: userId, message: message) { response in
              self.presenter?.presentReportUserResponse(response: response)
          }
    }
    
    func deleteMessage(chat: Chat) {
        worker = ChatWorker()
        worker?.deleteMessage(chat: chat) { response in
            self.presenter?.presentDeleteMessageResponse(response: response)
        }
      }
}
