//
//  LikeViewController.swift
//  canoodle
//
//  Created by Appineers India on 12/10/20.
//  Copyright (c) 2020 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LikeDisplayLogic: class
{
    func didReceiveGetConnectionsResponse(response: [Connection.ViewModel]?, settings: WSResponseSetting, message: String, successCode: String)
}

class LikeViewController: BaseViewControllerWithAd
{
    @IBOutlet weak var viewAd: UIView!
    @IBOutlet weak var subscribeView: UIView!
    @IBOutlet weak var likedButton: UIButton!
    @IBOutlet weak var likedMeButton: UIButton!
    @IBOutlet weak var likeCountLabel: UILabel!
    @IBOutlet weak var likedMeCountLabel: UILabel!
    @IBOutlet weak var connectionsTableView: UITableView!
    @IBOutlet weak var connectionsCollectionView: UICollectionView!
    @IBOutlet weak var detailView: UIView!
    @IBOutlet weak var watermarkView: UIView!


   var interactor: LikeBusinessLogic?
   var router: (NSObjectProtocol & LikeRoutingLogic & LikeDataPassing)?
    
   var selectedSegmentIndex: Int = 0
    var connectionsList = [Connection.ViewModel]()

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
    
    // MARK: Class Instance
    class func instance() -> LikeViewController? {
        return StoryBoard.Like.board.instantiateViewController(withIdentifier: AppClass.LikeVC.rawValue) as? LikeViewController
    }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = LikeInteractor()
    let presenter = LikePresenter()
    let router = LikeRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    self.navigationItem.title = "Like"
    self.viewAd.isHidden = (UserDefaultsManager.getLoggedUserDetails()?.purchaseStatus?.booleanStatus() ?? false)
    likedButton.setShadow()
    likedButton.layer.borderColor = UIColor.white.cgColor
    likedButton.layer.borderWidth = 2.0
    likedButton.layer.cornerRadius = 5.0
    likedMeButton.setShadow()
    likedMeButton.layer.borderColor = UIColor.white.cgColor
    likedMeButton.layer.borderWidth = 2.0
    likedMeButton.layer.cornerRadius = 5.0
    self.addAnayltics(analyticsParameterItemID: "id-likescreen", analyticsParameterItemName: "view_likescreen", analyticsParameterContentType: "view_likescreen")
  }
    
    /// Method is called when view did appear
   override func viewDidAppear(_ animated: Bool) {
       super.viewDidAppear(animated)
       self.setAddMobView(viewAdd: self.viewAd)
    
        if(selectedSegmentIndex == 1) {
            getConnections(type: "Likeme")
        } else {
            getConnections(type: "Like")
        }
   }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.viewAd.isHidden = (UserDefaultsManager.getLoggedUserDetails()?.premiumStatus?.booleanStatus() ?? false)
        if(viewAd.isHidden) {
            detailView.frame = CGRect(x: detailView.frame.origin.x, y: self.viewAd.frame.origin.y, width: detailView.frame.width, height: self.view.frame.height - viewAd.frame.height)
        }
    }
  
    
    @IBAction func likedButtonTapped(_ sender: WLButton) {
        //overlayView.removeFromSuperview()
        likedButton.setBackgroundImage(UIImage.init(named: "purpleRectBg"), for: UIControl.State.normal)
        likedMeButton.setBackgroundImage(UIImage.init(named: "greyRectBg"), for: UIControl.State.normal)
        selectedSegmentIndex = 0
        getConnections(type: "Like")
    }
    
    @IBAction func likedMeButtonTapped(_ sender: WLButton) {
        likedButton.setBackgroundImage(UIImage.init(named: "greyRectBg"), for: UIControl.State.normal)
        likedMeButton.setBackgroundImage(UIImage.init(named: "purpleRectBg"), for: UIControl.State.normal)
        selectedSegmentIndex = 1
        getConnections(type: "Likeme")
    }
    
  // MARK: Do something
    @IBAction func btnNotificationsAction(_ sender: Any) {
        if let notificationVC = NotificationsViewController.instance() {
            self.navigationController?.pushViewController(notificationVC, animated: true)
        }
    }
    
    @IBAction func btnSettingsAction(_ sender: Any) {
        if let settingsVC = SettingViewController.instance() {
            self.navigationController?.pushViewController(settingsVC, animated: true)
        }
    }
  
    func getConnections(type: String) {
        let request = Connection.Request(connectionType: type)
        interactor?.getConnections(request: request)
    }
    
    func showSubscribeView() {
        subscribeView.frame = CGRect(x: 0, y: 0, width: self.view.frame.width, height: self.view.frame.height)
        self.view.addSubview(subscribeView)
    }
    
    @IBAction func cancelButtonTapped(_ sender: UIButton) {
        subscribeView.removeFromSuperview()
    }
    
    @IBAction func subscribeButtonTapped(_ sender: UIButton) {
        subscribeView.removeFromSuperview()
        if let subscriptionVC = SubscriptionViewController.instance() {
            self.navigationController?.pushViewController(subscriptionVC, animated: true)
        }
    }
}

// UITableView Delegate methods
extension LikeViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if(connectionsList.count == 0) {
            watermarkView.isHidden = false
            connectionsCollectionView.isHidden = true
        } else {
            watermarkView.isHidden = true
            connectionsCollectionView.isHidden = false
        }
        return connectionsList.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        var cell: LikeViewCell! = tableView.dequeueReusableCell(withIdentifier: "LikeViewCell") as? LikeViewCell
        
        if cell == nil {
            tableView.register(UINib(nibName: "LikeViewCell", bundle: nil), forCellReuseIdentifier: "LikeViewCell")
            cell = tableView.dequeueReusableCell(withIdentifier: "LikeViewCell") as? LikeViewCell
        }
        //cell.delegate = self
        cell.setCellData(connection: connectionsList[indexPath.row], index: selectedSegmentIndex)
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if let userProfileVC = UserProfileViewController.instance() {
            let user: Connection.ViewModel = connectionsList[indexPath.row]
            userProfileVC.setUserId(userId: user.userId!)
            self.navigationController?.pushViewController(userProfileVC, animated: true)
        }
    }
}

extension LikeViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 1
    }


    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        if(connectionsList.count == 0) {
            watermarkView.isHidden = false
            connectionsCollectionView.isHidden = true
        } else {
            watermarkView.isHidden = true
            connectionsCollectionView.isHidden = false
        }
        return connectionsList.count
    }

    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        var cell: LikeCollectionViewCell! = collectionView.dequeueReusableCell(withReuseIdentifier: "LikeCollectionViewCell", for: indexPath) as? LikeCollectionViewCell
    if cell == nil {
        collectionView.register(UINib(nibName: "LikeCollectionViewCell", bundle: nil), forCellWithReuseIdentifier: "LikeCollectionViewCell")
        cell = collectionView.dequeueReusableCell(withReuseIdentifier: "LikeCollectionViewCell", for: indexPath) as? LikeCollectionViewCell
    }
        // Configure the cell
        cell.setCellData(connection: connectionsList[indexPath.row], index: selectedSegmentIndex)
        //cell.delegate = self
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        if((selectedSegmentIndex == 1) && (UserDefaultsManager.getLoggedUserDetails()?.premiumStatus?.booleanStatus() == false)) {
            showSubscribeView()
        } else {
            if let userProfileVC = UserProfileViewController.instance() {
                let user: Connection.ViewModel = connectionsList[indexPath.row]
                userProfileVC.setUserId(userId: user.userId!)
                self.navigationController?.pushViewController(userProfileVC, animated: true)
            }
        }
    }
    
    func collectionView(_ collectionView: UICollectionView,layout collectionViewLayout: UICollectionViewLayout,sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: ((self.connectionsCollectionView.frame.width / 2) - 15), height: 185)
    }
}

extension LikeViewController: LikeDisplayLogic {
    func didReceiveGetConnectionsResponse(response: [Connection.ViewModel]?, settings: WSResponseSetting, message: String, successCode: String) {
        if successCode == "1" {
            print(message)
            if let data = response {
                connectionsList.removeAll()
                self.connectionsList.append(contentsOf: data)
                likeCountLabel.text = "\(settings.likeCount ?? "0")"
                likedMeCountLabel.text = "\(settings.likeMeCount ?? "0")"

               /* if(selectedSegmentIndex == 0) {
                    likeCountLabel.text = "\(connectionsList.count)"
                } else {
                    likedMeCountLabel.text = "\(connectionsList.count)"
                }*/
                connectionsCollectionView.reloadData()
            }
        } else {
            //self.showTopMessage(message: message, type: .Error)
            connectionsList.removeAll()
            if(selectedSegmentIndex == 0) {
                likeCountLabel.text = "\(connectionsList.count)"
            } else {
                likedMeCountLabel.text = "\(connectionsList.count)"
            }
            connectionsCollectionView.reloadData()
        }
    }
}

