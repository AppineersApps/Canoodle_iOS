//
//  HomeFilterViewController.swift
//  MadCollab
//
//  Created by Appineers India on 08/05/20.
//  Copyright (c) 2020 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MultiSlider
import GooglePlaces


protocol HomeFilterDisplayLogic: class
{
      func didReceiveStateListResponse(response: [StateList.ViewModel]?, message: String, successCode: String)
}

class HomeFilterViewController: BaseViewController, HomeFilterDisplayLogic
{
    @IBOutlet weak var txtFieldLocation: CustomTextField!
    @IBOutlet weak var segmentedControl: UISegmentedControl!
    @IBOutlet weak var multiSlider: MultiSlider!
    @IBOutlet weak var distanceLabel: UILabel!
    @IBOutlet weak var interestsView: UIView!

  var interactor: HomeFilterBusinessLogic?
  var router: (NSObjectProtocol & HomeFilterRoutingLogic & HomeFilterDataPassing)?
    
    var filter: Filter?
    
    var city: String = ""
    var stateListData = [StateList.ViewModel]()
    var state: String = ""
    var stateId = ""

    var filterLocation: String = ""


  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
    
    // MARK: Class Instance
    class func instance() -> HomeFilterViewController? {
        return StoryBoard.HomeFilter.board.instantiateViewController(withIdentifier: AppClass.HomeFilterVC.rawValue) as? HomeFilterViewController
    }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = HomeFilterInteractor()
    let presenter = HomeFilterPresenter()
    let router = HomeFilterRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
        super.viewDidLoad()
        setUpLayout()
    self.addAnayltics(analyticsParameterItemID: "id-homefilterscreen", analyticsParameterItemName: "view_homefilterscreen", analyticsParameterContentType: "view_homefilterscreen")
  }
    
    func setUpLayout() {
        self.title = "Filter"

        //setup segmented control
        segmentedControl.layer.borderColor = AppConstants.appColor?.cgColor
        segmentedControl.layer.borderWidth = 1.0
        segmentedControl.backgroundColor = UIColor.white
        segmentedControl.setTitleTextAttributes([NSAttributedString.Key.foregroundColor :  UIColor.white ,NSAttributedString.Key.font : UIFont.systemFont(ofSize: 12.0)], for: UIControl.State.selected)
        segmentedControl.setTitleTextAttributes([NSAttributedString.Key.foregroundColor :  AppConstants.appColor, NSAttributedString.Key.font : UIFont.systemFont(ofSize: 12.0)], for: UIControl.State.normal)
        self.setUpSlider()
        // setup slider
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
            self.setUpFilters()
            let loginData = UserDefaultsManager.getLoggedUserDetails()
            if(!(UserDefaultsManager.getLoggedUserDetails()?.premiumStatus?.booleanStatus())!) {
                self.txtFieldLocation.text = "\(loginData?.city ?? ""), \(loginData?.state ?? "")"
            }
        }
        
        if (!(WhiteLabelSessionHandler.shared.stateListDate.count > 0)) {
            interactor?.callStateAPI()
        } else if (WhiteLabelSessionHandler.shared.stateListDate.count > 0) {
            self.stateListData = WhiteLabelSessionHandler.shared.stateListDate
        }
    }
    
    func getSelectedIndex(str: String) -> Int {
        switch str {
        case "Male":
            return 0
            case "Female":
                return 1
            case "Non Binary":
                return 2
            case "All":
                return 3
        default:
            return 0
        }
        
    }
    
    func setUpFilters () {
        filter = UserDefaultsManager.getFilter()
        segmentedControl.selectedSegmentIndex = getSelectedIndex(str: filter!.gender!)

        multiSlider.value[0] = CGFloat(Float(Int(filter!.distance!)!))
      //  multiSlider.value[1] = CGFloat(Float(Int(filter!.maxAge!)!))
        sliderChanged(multiSlider)
        //txtFieldLocation.text = filter?.location
       // filterLocation = txtFieldLocation.text!
    }
    
    func setUpSlider() {
        multiSlider.addTarget(self, action: #selector(sliderChanged(_:)), for: .valueChanged)
        //multiSlider.disabledThumbIndices = [3]

        DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
            self.multiSlider.thumbCount = 1
            self.multiSlider.valueLabelPosition = .bottom
            self.multiSlider.valueLabelPosition = .bottomMargin
            self.multiSlider.isValueLabelRelative = false
        }

    }
    
    @objc func sliderChanged(_ slider: MultiSlider) {
        print("thumb \(slider.draggedThumbIndex) moved")
        print("now thumbs are at \(slider.value)") // e.g., [1.0, 4.5, 5.0]
        distanceLabel.text = "\(Int(slider.value[0])) miles"
    }
    
    func getSelectedInterestsString() -> String {
        var str: String = ""
        if(str != "") {
            str.removeLast()
        }
        return str
    }
    
     @IBAction func btnApplyAction(_ sender: Any) {
        var dictionary: [String:String] = [:]
        dictionary.updateValue(self.getSelectedInterestsString(), forKey: "Interests")
        dictionary.updateValue(txtFieldLocation.text!, forKey: "Location")
        dictionary.updateValue("\(Int(multiSlider.value[0]))", forKey: "MinAge")
        dictionary.updateValue("\(Int(multiSlider.value[1]))", forKey: "MaxAge")
        filter = Filter(dictionary: dictionary)
        print("filter min = \(filter?.minAge!) , max = \(filter?.maxAge!)") // e.g., [1.0, 4.5, 5.0]

        UserDefaultsManager.setFilter(filter: filter!)
    }
    
    @IBAction func resetButtonPressed(sender: UIButton) {
        UserDefaultsManager.resetFilter()
        setUpLayout()
    }
    
    @IBAction func cancelButtonPressed(sender: UIBarButtonItem!) {
        
    }
    
    @IBAction func doneButtonPressed(sender: UIBarButtonItem!) {
        var dictionary: [String:String] = [:]
        dictionary.updateValue(self.segmentedControl.titleForSegment(at: segmentedControl.selectedSegmentIndex)!, forKey: "Gender")
        dictionary.updateValue("\(Int(multiSlider.value[0]))", forKey: "Distance")
        //dictionary.updateValue("\(Int(multiSlider.value[0]))", forKey: "MinAge")
        //dictionary.updateValue("\(Int(multiSlider.value[1]))", forKey: "MaxAge")
        filter = Filter(dictionary: dictionary)
       // print("filter min = \(filter?.minAge!) , max = \(filter?.maxAge!)") // e.g., [1.0, 4.5, 5.0]

        UserDefaultsManager.setFilter(filter: filter!)
        
        let storyboard = UIStoryboard(name: "TabBar", bundle: nil)
        if let tab = storyboard.instantiateInitialViewController(), tab is TabbarController {
            AppConstants.appDelegate.window?.rootViewController = tab
        }
       // self.navigationController?.popViewController(animated: true)
    }
  
  // MARK: Do something
  

  /// Did Receive State List Response
  ///
  /// - Parameters:
  ///   - Response: API Response
  ///   - message: API Message
  ///   - successCode: API Success
  func didReceiveStateListResponse(response: [StateList.ViewModel]?, message: String, successCode: String) {
      if successCode == "1" {
          if let data = response {
              WhiteLabelSessionHandler.shared.setStateList(data: data)
              self.stateListData = data
          }
      }
  }
}

//UITextfield Delegate
extension HomeFilterViewController: UITextFieldDelegate {
    
    /// Method is called when textfield begins editing
    ///
    /// - Parameter textField: Textfield reference

    
     func textFieldDidBeginEditing(_ textField: UITextField) {
        if textField == txtFieldLocation {
            if(!(UserDefaultsManager.getLoggedUserDetails()?.premiumStatus?.booleanStatus())!) {
                GlobalUtility.shared.currentTopViewController().displayAlert(msg: "To Access this feature please buy Premium Subscription", ok: "Buy", cancel: "Cancel", okAction: {
                     if let subscriptionVC = SubscriptionViewController.instance() {
                         self.navigationController?.pushViewController(subscriptionVC, animated: true)
                     }
                    self.addAnayltics(analyticsParameterItemID: "id-premiumsubscription", analyticsParameterItemName: "click_premiumsubscription", analyticsParameterContentType: "click_premiumsubscription")
                    
                }, cancelAction: nil)
               // self.txtFieldLocation.text = self.filter?.location
                return
            }
            if let googleApi = GoogleSearch.instance() {
                googleApi.completion = {predictor, error in
                    guard error == nil else {return}
                    //self.txtFieldZip.text = ""
                    if let predictor = predictor {
                        let placeClient = GMSPlacesClient.shared()
                        placeClient.lookUpPlaceID(predictor.placeID) { (place, error) in
                            if error == nil {
                                //self.txtFieldLocation.text = predictor.attributedPrimaryText.string
                                self.setSearchDetailsAddress(addressComponent: (place?.addressComponents)!)
                            }
                        }
                    }
                    else {
                        print("zipcode entered")
                    }
                }
                googleApi.modalPresentationStyle = .fullScreen
                self.present(googleApi, animated: true, completion: nil)
            }
        }
    }
    
    func setSearchDetailsAddress(addressComponent: [GMSAddressComponent]) {
        var streetArray:String = ""
        for address in addressComponent {
            var addressStr = "\(address)"
            //addressStr = addressStr.replacingOccurrences(of: "Types:", with: "")
            let addressArr = addressStr.components(separatedBy: ",")
            print("addressArr=\(addressArr)")
            /*if((addressStr.contains("postal_code"))||(addressStr.contains("route"))||(addressStr.contains("country"))||(addressStr.contains("street_number"))||(addressStr.contains("administrative_area_level_1"))||(addressStr.contains("administrative_area_level_2"))) {
            }
            else {*/
            if(addressStr.contains("administrative_area_level_1")) {
                addressArr.forEach { str in
                    if(str.hasPrefix(" Name: ")) {
                        let nameStr = str.replacingOccurrences(of: " Name: ", with: "")
                        print("state name= \(nameStr)")
                        state = nameStr
                        self.stateId = ""
                    }
                }
            }
            
            if(addressStr.contains("locality")) {
                addressArr.forEach { str in
                    if(str.hasPrefix(" Name: ")) {
                        let nameStr = str.replacingOccurrences(of: " Name: ", with: "")
                        print("city name= \(nameStr)")
                        city = nameStr
                    }
                }
            }
            //}
        }
        txtFieldLocation.text = "\(city), \(state)"
        let stateData = self.stateListData.filter {$0.state == state}
        if stateData.count > 0 {
            self.stateId = stateData[0].stateId ?? ""
        }
    }
    
    func textFieldShouldClear(_ textField: UITextField) -> Bool {
                if(!(UserDefaultsManager.getLoggedUserDetails()?.premiumStatus?.booleanStatus())!) {
            GlobalUtility.shared.currentTopViewController().displayAlert(msg: "To Access this feature please buy Premium Subscription", ok: "Buy", cancel: "Cancel", okAction: {
                 if let subscriptionVC = SubscriptionViewController.instance() {
                     self.navigationController?.pushViewController(subscriptionVC, animated: true)
                 }
                
                self.addAnayltics(analyticsParameterItemID: "id-premiumsubscription", analyticsParameterItemName: "click_premiumsubscription", analyticsParameterContentType: "click_premiumsubscription")
            }, cancelAction: {
                self.filter = UserDefaultsManager.getFilter()
               // print("filter location  =\(self.filter?.location!)")
                //self.txtFieldLocation.text = self.filterLocation
            })
            //self.txtFieldLocation.text = self.filterLocation
            return false
        }
        //txtFieldLocation.text = ""
        return true
    }
}

