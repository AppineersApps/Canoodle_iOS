//
//  HomeModels.swift
//  WhiteLabelApp
//
//  Created by hb on 18/09/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

///Home Request and Reponse
enum User {
    struct Request {
        var gender : String?
    }
    
    class ViewModel: WSResponseData {
        var userId : String?
        var userName : String?
        var userImage : String?
        var description: String?
        var age : String?
        var city : String?
        var state : String?
        var connectionStatus: String?
        var media : [Media.ViewModel]?

        
        private enum CodingKeys: String, CodingKey {
            case user_id
            case user_name
            case user_image
            case description
            case age
            case city
            case state
            case connection_type_by_logged_user
            case media
        }
        
        public override func encode(to encoder: Encoder) throws {
            try super.encode(to: encoder)
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encode(userId, forKey: .user_id)
            try container.encode(userName, forKey: .user_name)
            try container.encode(userImage, forKey: .user_image)
            try container.encode(description, forKey: .description)
            try container.encode(age, forKey: .age)
            try container.encode(city, forKey: .city)
            try container.encode(state, forKey: .state)
            try container.encode(connectionStatus, forKey: .connection_type_by_logged_user)
            try container.encode(media, forKey: .media)
        }
        
        required public init(from decoder: Decoder) throws {
            try super.init(from: decoder)
            let values = try decoder.container(keyedBy: CodingKeys.self)
            userId = try values.decodeIfPresent(String.self, forKey: .user_id)
            userName = try values.decodeIfPresent(String.self, forKey: .user_name)
            userImage = try values.decodeIfPresent(String.self, forKey: .user_image)
            description = try values.decodeIfPresent(String.self, forKey: .description)
            age = try values.decodeIfPresent(String.self, forKey: .age)
            city = try values.decodeIfPresent(String.self, forKey: .city)
            state = try values.decodeIfPresent(String.self, forKey: .state)
            connectionStatus = try values.decodeIfPresent(String.self, forKey: .connection_type_by_logged_user)
            media = try values.decodeIfPresent([Media.ViewModel].self, forKey: .media)
        }
    }
}

enum Media {
    struct Request {
    }
    
    class ViewModel: WSResponseData {
        var mediaId : String?
        var mediaType : String?
        var mediaImages : String?
        
        private enum CodingKeys: String, CodingKey {
            case media_id
            case media_type
            case media_images
        }
        
        public override func encode(to encoder: Encoder) throws {
            try super.encode(to: encoder)
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encode(mediaId, forKey: .media_id)
            try container.encode(mediaType, forKey: .media_type)
            try container.encode(mediaImages, forKey: .media_images)
        }
        
        required public init(from decoder: Decoder) throws {
            try super.init(from: decoder)
            let values = try decoder.container(keyedBy: CodingKeys.self)
            mediaId = try values.decodeIfPresent(String.self, forKey: .media_id)
            mediaType = try values.decodeIfPresent(String.self, forKey: .media_type)
            mediaImages = try values.decodeIfPresent(String.self, forKey: .media_images)
        }
    }
}


enum SetConnection {
    struct Request {
        var connectionUserId: String
        var connectionType: String
    }
    
    /// Response Class
    class Response: WSResponseData {
     
        /// Default Init Methods
        ///
        /// - Parameter decoder: Decoder
        /// - Throws: throws exception if found error
        required init(from decoder: Decoder) throws {
            try super.init(from: decoder)
        }
       
        /// Default encode method
        ///
        /// - Parameter encoder: Encoder
        /// - Throws:throws exception if found error
        public override func encode(to encoder: Encoder) throws {
            try super.encode(to: encoder)
        }
    }
}
