//
//  NotificationsModels.swift
//  MadCollab
//
//  Created by Appineers India on 28/04/20.
//  Copyright (c) 2020 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum Notification {
    struct Request {
        var notificationId : String?
    }
    
    class ViewModel: WSResponseData {
        var notificationId : String?
        var notificationType: String?
        var notificationUserId: String?
        var userName : String?
        var userImage : String?
        var message: String?
        
        private enum CodingKeys: String, CodingKey {
            case notification_id
            case notification_type
            case notification_user_id
            case user_name
            case user_image
            case message
        }
        
        public override func encode(to encoder: Encoder) throws {
            try super.encode(to: encoder)
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encode(notificationId, forKey: .notification_id)
            try container.encode(notificationType, forKey: .notification_type)
            try container.encode(notificationUserId, forKey: .notification_user_id)
            try container.encode(userName, forKey: .user_name)
            try container.encode(userImage, forKey: .user_image)
            try container.encode(message, forKey: .message)
        }
        
        required public init(from decoder: Decoder) throws {
            try super.init(from: decoder)
            let values = try decoder.container(keyedBy: CodingKeys.self)
            notificationId = try values.decodeIfPresent(String.self, forKey: .notification_id)
            notificationType = try values.decodeIfPresent(String.self, forKey: .notification_type)
            notificationUserId = try values.decodeIfPresent(String.self, forKey: .notification_user_id)
            userName = try values.decodeIfPresent(String.self, forKey: .user_name)
            userImage = try values.decodeIfPresent(String.self, forKey: .user_image)
            message = try values.decodeIfPresent(String.self, forKey: .message)
        }
    }
}
