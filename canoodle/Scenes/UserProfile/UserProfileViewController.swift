//
//  UserProfileViewController.swift
//  canoodle
//
//  Created by Appineers India on 15/10/20.
//  Copyright (c) 2020 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import ImageSlideshow

protocol UserProfileDisplayLogic: class
{
    func didReceiveGetUserProfileResponse(response: [User.ViewModel]?, message: String, successCode: String)
    func didReceiveSetConnectionResponse(message: String, successCode: String)
    func didReceiveReportUserResponse(message: String, successCode: String)
    func didReceiveBlockUserResponse(message: String, successCode: String)
}

class UserProfileViewController: BaseViewControllerWithAd
{
    @IBOutlet weak var viewAd: UIView!
    @IBOutlet weak var nameLabel: UILabel!
    @IBOutlet weak var locationLabel: UILabel!
    @IBOutlet weak var profileImageView: UIImageView!
    @IBOutlet weak var aboutTextView: UITextView!
    @IBOutlet var slideshow: ImageSlideshow!
    @IBOutlet weak var statusView: UIView!
    @IBOutlet weak var detailView: UIView!


  var interactor: UserProfileBusinessLogic?
  var router: (NSObjectProtocol & UserProfileRoutingLogic & UserProfileDataPassing)?

    var userId: String = ""
    var user: User.ViewModel!
    var medias: [Media.ViewModel] = []

    var localSource: [KingfisherSource] = []
    
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = UserProfileInteractor()
    let presenter = UserProfilePresenter()
    let router = UserProfileRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
    
    // MARK: Class Instance
    class func instance() -> UserProfileViewController? {
        return StoryBoard.UserProfile.board.instantiateViewController(withIdentifier: AppClass.UserProfileVC.rawValue) as? UserProfileViewController
    }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    self.title = "User Profile"
    profileImageView.layer.cornerRadius = profileImageView.frame.width / 2
    profileImageView.layer.borderColor = AppConstants.appColor2!.cgColor
    profileImageView.layer.borderWidth = 2.0
  }
    
    /// Method is called when view will appears
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.viewAd.isHidden = (UserDefaultsManager.getLoggedUserDetails()?.purchaseStatus?.booleanStatus() ?? false)
        self.addAnayltics(analyticsParameterItemID: "id-userprofilescreen", analyticsParameterItemName: "view_userprofilescreen", analyticsParameterContentType: "view_userprofilescreen")
        if(viewAd.isHidden) {
            detailView.frame = CGRect(x: detailView.frame.origin.x, y: self.viewAd.frame.origin.y, width: detailView.frame.width, height: self.view.frame.height - viewAd.frame.height)
        }
    }
    
    /// Method is called when view did appear
   override func viewDidAppear(_ animated: Bool) {
       super.viewDidAppear(animated)
       self.setAddMobView(viewAdd: self.viewAd)
        getUserProfile()
   }
    
    func setUserData() {
        nameLabel.text = user.userName
        locationLabel.text = "\(user.city!), \(user.state!)"
        aboutTextView.text = user.description
        profileImageView.setImage(with: "\(user.userImage!)", placeHolder: UIImage.init(named: "placeholder"))
        if(user.connectionStatus != "Like" && user.connectionStatus != "Match") {
            statusView.isHidden = false
        }
        setUpSlideshow()
    }
    
    func setUpSlideshow() {
        slideshow.slideshowInterval = 5.0
        slideshow.pageIndicatorPosition = .init(horizontal: .center, vertical: .customBottom(padding: 0))
        slideshow.contentScaleMode = UIViewContentMode.scaleAspectFill

        let pageControl = UIPageControl()
        pageControl.currentPageIndicatorTintColor = UIColor.lightGray
        pageControl.pageIndicatorTintColor = UIColor.black
        slideshow.pageIndicator = pageControl

        // optional way to show activity indicator during image load (skipping the line will show no activity indicator)
        slideshow.activityIndicator = DefaultActivityIndicator()
        slideshow.delegate = self

        // can be used with other sample sources as `afNetworkingSource`, `alamofireSource` or `sdWebImageSource` or `kingfisherSource`
        localSource.removeAll()
        filterMedia()
        medias.forEach { media in
            localSource.append(KingfisherSource(urlString: media.mediaImages!)!)
        }
        slideshow.setImageInputs(localSource)

       /* if((item?.imageUrls.count)! > 0) {
            let recognizer = UITapGestureRecognizer(target: self, action: #selector(ItemListTableViewCell.didTap))
            slideshow.addGestureRecognizer(recognizer)
        }*/
        slideshow.bringSubviewToFront(statusView)
    }
    
    func filterMedia() {
        medias.removeAll()
        self.user.media?.forEach() { media in
            if(media.mediaType == "image/png") {
                medias.append(media)
            }
        }
    }
    
    @IBAction func optionsButtonTapped(_ sender: Any) {
       let optionMenu = UIAlertController(title: "Select Option", message: nil, preferredStyle: .actionSheet)
       let blockAction = UIAlertAction(title: "Block User", style: .default) { handler in
          self.blockUser()
       }

       let reportAction = UIAlertAction(title: "Report User", style: .destructive) { handler in
           self.reportUserProfile()
       }
       let cancelAction = UIAlertAction(title: "Cancel", style: .cancel)

       optionMenu.addAction(blockAction)
       optionMenu.addAction(reportAction)
       optionMenu.addAction(cancelAction)
           
       GlobalUtility.shared.currentTopViewController().present(optionMenu, animated: true, completion: nil)
   }
    
    func reportUserProfile() {
        let optionMenu = UIAlertController(title: "Please select reason for reporting", message: nil, preferredStyle: .alert)

        let viewAllAction = UIAlertAction(title: "Abusive User", style: .default) { _ in
            self.addAnayltics(analyticsParameterItemID: "id-reportuser", analyticsParameterItemName: "Report User", analyticsParameterContentType: "app_event")

            self.reportUser(otherUserId: self.userId, message: "Abusive User")
        }
        let type1Action = UIAlertAction(title: "Spam User", style: .default) { _ in
            self.addAnayltics(analyticsParameterItemID: "id-reportuser", analyticsParameterItemName: "Report User", analyticsParameterContentType: "app_event")
            self.reportUser(otherUserId: self.userId, message: "Spam User")
        }
        let cancelAction = UIAlertAction(title: "Cancel", style: .cancel)

        optionMenu.addAction(viewAllAction)
        optionMenu.addAction(type1Action)
        optionMenu.addAction(cancelAction)
            
        AppConstants.appDelegate.window?.rootViewController!.present(optionMenu, animated: true, completion: nil)
    }
    
    
    @IBAction func likeButtonTapped(_ sender: Any) {
        self.addAnayltics(analyticsParameterItemID: "id-profilelike", analyticsParameterItemName: "Profile Like", analyticsParameterContentType: "event_profile")
        setConnection(userId: user.userId!, type: "Like")
    }
  
  // MARK: Do something
    
    func setUserId(userId: String) {
        self.userId = userId
    }
    
    func getUserProfile() {
        let request = UserProfile.Request(otherUserId: self.userId)
        interactor?.getUserProfile(request: request)
    }
    
    func setConnection(userId: String, type: String) {
        let request = SetConnection.Request(connectionUserId: userId, connectionType: type)
        interactor?.setConnection(request: request)
    }
    
    func reportUser(otherUserId: String, message: String) {
        self.addAnayltics(analyticsParameterItemID: "id-reportuserclick", analyticsParameterItemName: "click_reportuser", analyticsParameterContentType: "click_reportuser")
        let request = ReportUser.Request(reportOn: otherUserId, message: message)
        interactor?.reportUser(request: request)
    }
    
    func blockUser() {
        self.addAnayltics(analyticsParameterItemID: "id-blockuserclick", analyticsParameterItemName: "click_blockuser", analyticsParameterContentType: "click_blockuser")
        let request = BlockUser.Request(connectionUserId: self.userId, connectionType: "Block")
        interactor?.blockUser(request: request)
    }
}

extension UserProfileViewController: UserProfileDisplayLogic {
    /// Call API To Display Something
    ///
    /// - Parameter viewModel: Request
    func didReceiveGetUserProfileResponse(response: [User.ViewModel]?, message: String, successCode: String) {
        if successCode == "1" {
            print(message)
            if let data = response {
                //usersList.removeAll()
                //self.usersList.append(contentsOf: data)
                user = data.first
                setUserData()
            }
        } else {
            //self.showTopMessage(message: message, type: .Error)
            //usersList.removeAll()
        }
    }
    
    func didReceiveSetConnectionResponse(message: String, successCode: String) {
        if successCode == "1" {
            self.showTopMessage(message: message, type: .Success)
        } else {
            self.showTopMessage(message: message, type: .Error)
        }
    }
    
    func didReceiveReportUserResponse(message: String, successCode: String) {
        if successCode == "1" {
            self.showTopMessage(message: message, type: .Success)
        } else {
            self.showTopMessage(message: message, type: .Error)
        }
    }
    
    func didReceiveBlockUserResponse(message: String, successCode: String) {
        if successCode == "1" {
            self.showTopMessage(message: message, type: .Success)
        } else {
            self.showTopMessage(message: message, type: .Error)
        }
    }
}

extension UserProfileViewController: ImageSlideshowDelegate {
    func imageSlideshow(_ imageSlideshow: ImageSlideshow, didChangeCurrentPageTo page: Int) {
        //print("current page:", page)
    }
}
