//
//  ResetPasswordViewController.swift
//  PickUpUser
//
//  Created by hb on 10/06/19.
//  Copyright (c) 2019 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

/// Protocol for Reset Password response
protocol ResetPasswordDisplayLogic: class {
    /// Did Receive Reset Password Response
    ///
    /// - Parameters:
    ///   - message: API Message
    ///   - successCode: API Success
    func didReceivecResetPasswordResponse(message: String, success: String)
}

/// This class is used for reseting the password by entering new password and confirming new password.
class ResetPasswordViewController: BaseViewController {
    /// Interactor for API Call
    var interactor: ResetPasswordBusinessLogic?
    
    @IBOutlet weak var txtFieldNewPassword: CustomTextField!
    @IBOutlet weak var txtFieldConfirmPassword: CustomTextField!
    @IBOutlet weak var btnUpdatePassword: WLButton!
    
    var forgotPasswordData : ForgotPasswordPhone.ViewModel?
    var mobileNumber = ""
    
    /// Instance
    ///
    /// - Returns: ResetPasswordViewController
    class func instance() -> ResetPasswordViewController? {
        return StoryBoard.ResetPassword.board.instantiateViewController(withIdentifier: AppClass.resetPasswordVC.rawValue) as? ResetPasswordViewController
    }
    
    // MARK: Object lifecycle
    
     /// Override method to initialize with nib
    ///
    /// - Parameters:
    ///   - nibNameOrNil: Nib name
    ///   - nibBundleOrNil: Bundle in which nib is present
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
   /// Decoder
    ///
    /// - Parameter aDecoder: Decoder
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    /// Set Up For API Calls 
    private func setup() {
        let viewController = self
        let interactor = ResetPasswordInteractor()
        let presenter = ResetPasswordPresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }
    
    // MARK: View lifecycle
    
    /// Method is called when view loads
    override func viewDidLoad() {
        super.viewDidLoad()
        setupLayout()
    }
    
     /// Method is called when view did appear
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        self.txtFieldNewPassword.becomeFirstResponder()
    }
    
    /// Setup fields and ui
    func setupLayout() {
        self.navigationItem.title = AlertMessage.resetPasswordTitle
        btnUpdatePassword.addLoginButtonShadowAndCornerRadius()
    }
    
    /// Validiate fields and call reset password api
    fileprivate func validiateFields() {
        guard self.internetAvailable() else {
            return
        }
        do {
//            let newPassword = try txtFieldNewPassword.validatedText(validationType: ValidatorType.password(message: AlertMessage.invalidPassword))
//            _ = try txtFieldConfirmPassword.validatedText(validationType: ValidatorType.confirmpassword(password: newPassword, reqMessage: AlertMessage.requireConfirmPassword, equalMessage: AlertMessage.passwordConfirmPassword))
            
            let newPassword = try txtFieldNewPassword.validatedText(validationType: ValidatorType.requiredField(message: AlertMessage.requireNewPassword),
                                                                     visibility: true, optional: false)
            _ = try txtFieldNewPassword.validatedText(validationType: ValidatorType.password(message: AlertMessage.invalidNewPassword), visibility: true, optional: false)
            _ = try txtFieldConfirmPassword.validatedText(validationType: ValidatorType.requiredField(message: AlertMessage.requireConfirmPassword),
                                                          visibility: true, optional: false)
            _ = try txtFieldConfirmPassword.validatedText(validationType: ValidatorType.confirmpassword(password: txtFieldNewPassword.text ?? "", reqMessage: AlertMessage.requireConfirmPassword, equalMessage: AlertMessage.newConfirmPassword),
                                                          visibility: true, optional: false)
            
            let request = ResetPassword.Request(mobileNumber: self.mobileNumber, newPassword: newPassword, resetKey: forgotPasswordData?.resetKey ?? "0")
            self.interactor?.resetPasswordPassword(request: request)
        } catch(let error) {
            self.showTopMessage(message: (error as? ValidationError)?.message, type: .Error)
        }
    }
    
    /// Update password
    ///
    /// - Parameter sender: WLButton
    @IBAction func btnUpdatePasswordAction(_ sender: Any) {
        if self.internetAvailable() {
                validiateFields()
            }
    }
}
/// Protocol for Reset Password response
extension ResetPasswordViewController : ResetPasswordDisplayLogic {
    /// Did Receive Reset Password Response
    ///
    /// - Parameters:
    ///   - message: API Message
    ///   - successCode: API Success
    func didReceivecResetPasswordResponse(message: String, success: String) {
        if success == "1" {
            self.showTopMessage(message: message, type: .Success)
            self.navigationController?.popToRootViewController(animated: true)
        } else {
            self.showTopMessage(message: message, type: .Error)
        }
    }
    
}
