//
//  PetProfileViewController.swift
//  canoodle
//
//  Created by Appineers India on 20/10/20.
//  Copyright (c) 2020 The Appineers. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PetProfileDisplayLogic: class
{
    func didReceiveUploadMediaResponse(message: String, success: String)
    func didReceiveUpdatePetProfileResponse(message: String, success: String)
    func didReceiveDeleteMediaResponse(message: String, successCode: String)
}

class PetProfileViewController: BaseViewController
{
    @IBOutlet weak var clctnView: UICollectionView!
    @IBOutlet weak var breedTextField: UITextField!

  var interactor: PetProfileBusinessLogic?
  var router: (NSObjectProtocol & PetProfileRoutingLogic & PetProfileDataPassing)?
    
    /// Image Array to display images in scroll
    var medias: [Media.ViewModel] = []
    var imageArray = [UIImage]() {
        didSet {
            clctnView.reloadData()
            self.scrollToBottom()
        }
    }
    
    var breed: String = ""

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = PetProfileInteractor()
    let presenter = PetProfilePresenter()
    let router = PetProfileRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
    
    // MARK: Class Instance
    class func instance() -> PetProfileViewController? {
        return StoryBoard.PetProfile.board.instantiateViewController(withIdentifier: AppClass.PetProfileVC.rawValue) as? PetProfileViewController
    }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    self.title = "Edit Pet Profile"
  }
    
    override func viewDidAppear(_ animated: Bool) {
        breedTextField.text = breed
    }
    
    /// Scroll colllecttionview to last index while add image
    func scrollToBottom() {
        DispatchQueue.main.async {
            if self.imageArray.count == 5 {
                let indexPath = IndexPath(row: self.imageArray.count - 1, section: 0)
                self.clctnView.scrollToItem(at: indexPath, at: .right, animated: false)
            } else {
                let indexPath = IndexPath(row: self.imageArray.count, section: 0)
                self.clctnView.scrollToItem(at: indexPath, at: .right, animated: false)
            }
        }
    }
    
    /// Open camera/gallery
    func addPhoto() {
        CustomImagePicker.shared.openImagePickerWith(mediaType: .MediaTypeImage, allowsEditing: true, actionSheetTitle: AppInfo.kAppName, message: "", cancelButtonTitle: "Cancel", cameraButtonTitle: "Camera", galleryButtonTitle: "Gallery") { (_, success, dict) in
            if success {
                if let img = (dict!["edited_image"] as? UIImage) {
                    self.imageArray.append(img)
                }
            }
        }
    }
    
    @IBAction func btnSaveAction(_ sender: Any) {
        saveProfile()
     }

     @IBAction func btnCancelAction(_ sender: Any) {
         self.displayAlert(msg: "Are you sure you want to Cancel? You will lose all changes", ok: "YES", cancel: "NO", okAction: {
             self.navigationController?.popViewController(animated: true)
         }, cancelAction: nil)
     }
  
  // MARK: Do something
  
    func setMedias(medias: [Media.ViewModel]) {
        self.medias = medias
    }
  
  func saveProfile()
  {
    let request = UploadMedia.Request(imageArray: imageArray)
    interactor?.uploadMedia(request: request)
  }
    
    func deleteMedia(mediaId: String)
    {
        let request = DeleteMedia.Request(media_id: mediaId)
        interactor?.deleteMedia(request: request)
    }
}

//UIcollectionview Methods
extension PetProfileViewController:  UICollectionViewDelegate, UICollectionViewDataSource {
    /// Method is called to get number of items to be displayed in collectionview
    ///
    /// - Parameters:
    ///   - collectionView: CollectionView
    ///   - section: Section
    /// - Returns: Return number of rows
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        if imageArray.count == 5 {
            return imageArray.count
        } else {
            return imageArray.count + medias.count + 1
        }
    }
    
    /// Method is called to get cell for row at particular index
    ///
    /// - Parameters:
    ///   - collectionView: Collectionview
    ///   - indexPath: Indexpath
    /// - Returns: Return cell for indexpath
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        if indexPath.row == (imageArray.count + medias.count) {
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "addImage", for: indexPath) as? SendFeedbackAddImageCollectionViewCell
            cell?.btnAddTappedClouser = {
                self.addPhoto()
            }
            return cell!
        } else {
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "postCell", for: indexPath) as? SendFeedbackImageCollectionViewCell
            if(indexPath.row >= medias.count) {
                cell?.imgPicked.image = imageArray[indexPath.row - medias.count]
            } else {
                let media = medias[indexPath.row]
                cell?.imgPicked.setImage(with: media.mediaImages, placeHolder: UIImage.init(named: "placeholder"))
            }
            cell?.btnRemoveTappedClouser = {
                self.displayAlert(msg: AlertMessage.deleteMessage, ok: "Yes", cancel: "No", okAction: {
                    if(indexPath.row >= self.medias.count) {
                        self.imageArray.remove(at: (indexPath.row - self.medias.count))
                        self.clctnView.reloadData()
                    } else {
                        let media = self.medias[indexPath.row]
                        self.deleteMedia(mediaId: media.mediaId!)
                        self.medias.remove(at: indexPath.row)
                        self.clctnView.reloadData()
                    }
                }, cancelAction: nil)
                
            }
            return cell!
        }
    }
}

//UITextfield Delegate
extension PetProfileViewController: UITextFieldDelegate {
    
    /// Method is called when textfield begins editing
    ///
    /// - Parameter textField: Textfield reference
    func textFieldDidBeginEditing(_ textField: UITextField) {
        if textField == breedTextField {
            textField.resignFirstResponder()
            if let breedsVC = BreedsViewController.instance() {
                self.navigationController?.pushViewController(breedsVC, animated: true)
            }
        }
    }
}

extension PetProfileViewController: PetProfileDisplayLogic {
    
    func didReceiveUploadMediaResponse(message: String, success: String) {
        if success == "1" {
            self.showTopMessage(message: "Media added successfully", type: .Success)
            self.navigationController?.popViewController(animated: true)
        } else {
            self.showTopMessage(message: message, type: .Error)
        }
    }
    
    func didReceiveUpdatePetProfileResponse(message: String, success: String) {
        if success == "1" {
            self.showTopMessage(message: "Media added successfully", type: .Success)
            self.navigationController?.popViewController(animated: true)
        } else {
            self.showTopMessage(message: message, type: .Error)
        }
    }
    
    func didReceiveDeleteMediaResponse(message: String, successCode: String) {
        if successCode == "1" {
            self.showTopMessage(message: message, type: .Success)
        } else {
            self.showTopMessage(message: message, type: .Error)
        }
    }
}
