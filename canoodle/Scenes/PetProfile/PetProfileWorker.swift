//
//  PetProfileWorker.swift
//  canoodle
//
//  Created by Appineers India on 20/10/20.
//  Copyright (c) 2020 The Appineers. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class PetProfileWorker
{
    func uploadMedia(request: UploadMedia.Request, completionHandler: @escaping ( _ message: String?, _ successCode: String?) -> Void) {
        NetworkService.dataRequest(with: UploadMediaAPIRouter.uploadMedia(request: request)) { (responce: WSResponse<UploadMedia.Response>?, error: NetworkError?) in
            if let detail = responce {
                if  detail.arrayData != nil, let success = detail.setting?.isSuccess, let msg = detail.setting?.message, success {
                    completionHandler( msg, detail.setting?.success)
                } else {
                    completionHandler(detail.setting?.message, detail.setting?.success)
                }
            } else {
                completionHandler(error?.erroMessage() ?? AlertMessage.defaultError, "0")
            }
        }
    }
    
    func updatePetProfile(request: UpdatePetProfile.Request, completionHandler: @escaping ( _ message: String?, _ successCode: String?) -> Void) {
        NetworkService.dataRequest(with: UpdateProfileAPIRouter.updatePetProfile(request: request)) { (responce: WSResponse<UpdatePetProfile.Response>?, error: NetworkError?) in
            if let detail = responce {
                if  detail.arrayData != nil, let success = detail.setting?.isSuccess, let msg = detail.setting?.message, success {
                    completionHandler( msg, detail.setting?.success)
                } else {
                    completionHandler(detail.setting?.message, detail.setting?.success)
                }
            } else {
                completionHandler(error?.erroMessage() ?? AlertMessage.defaultError, "0")
            }
        }
    }
    
    func deleteMedia(request: DeleteMedia.Request, completionHandler: @escaping ( _ message: String?, _ successCode: String?) -> Void) {
      NetworkService.updateDataRequest(with: DeleteMediaAPIRouter.deleteMedia(request: request)) { (responce: WSResponse<DeleteMedia.Response>?, error: NetworkError?) in
          if let detail = responce {
              if  detail.arrayData != nil, let success = detail.setting?.isSuccess, let msg = detail.setting?.message, success {
                  completionHandler( msg, detail.setting?.success)
              } else {
                  completionHandler(detail.setting?.message, detail.setting?.success)
              }
          } else {
              completionHandler(error?.erroMessage(), "0")
          }
      }
    }
}
