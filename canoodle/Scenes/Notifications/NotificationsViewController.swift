//
//  NotificationsViewController.swift
//  MadCollab
//
//  Created by Appineers India on 28/04/20.
//  Copyright (c) 2020 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CRRefresh


protocol NotificationsDisplayLogic: class
{
    func didReceiveNotificationsResponse(response: [Notification.ViewModel]?, message: String, successCode: String)
}

class NotificationsViewController: UIViewController
{
    @IBOutlet weak var notificationsTableView: UITableView!
    @IBOutlet weak var deleteView: UIView!
    @IBOutlet weak var deleteHolderView: UIView!
    @IBOutlet weak var watermarkView: UIView!

    
  var interactor: NotificationsBusinessLogic?
  var router: (NSObjectProtocol & NotificationsRoutingLogic & NotificationsDataPassing)?

    var notificationsList:[Notification.ViewModel] = []
    
    var selectedRowIndex: Int = 0

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
    
    // MARK: Class Instance
    class func instance() -> NotificationsViewController? {
        return StoryBoard.Notifications.board.instantiateViewController(withIdentifier: AppClass.NotificationsVC.rawValue) as? NotificationsViewController
    }
    
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = NotificationsInteractor()
    let presenter = NotificationsPresenter()
    let router = NotificationsRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    self.title = "Notifications"
  }
    
    override func viewDidAppear(_ animated: Bool) {
        //UserDefaultsManager.notificationCount = 0
        notificationsTableView.cr.addHeadRefresh(animator: FastAnimator()) { [weak self] in
            /// start refresh
            self!.getNotifications()
            DispatchQueue.main.asyncAfter(deadline: .now() + 60, execute: {
                /// Stop refresh when your job finished, it will reset refresh footer if completion is true
                self?.notificationsTableView.cr.endHeaderRefresh()
            })
        }
        /// manual refresh
        notificationsTableView.cr.beginHeaderRefresh()
    }
  
  // MARK: Do something
  
  func getNotifications()
  {
    interactor?.getNotifications()
  }
    
    func clearAllNotifications() {
        notificationsList.forEach { notification in
           // deleteNotification(notification: notification)
        }
    }
    
    func deleteNotification(notification: Notification)
    {
        //interactor?.deleteNotification(notification: notification)
    }

    
    func displayDeleteNotificationResponse(response: Bool)
    {
        if(response == true) {
            self.showTopMessage(message: "Notification deleted successfully", type: .Success)
            notificationsList.remove(at: selectedRowIndex)
            notificationsTableView.deleteRows(at: [IndexPath.init(row: selectedRowIndex, section: 0)], with: .fade)
            if(notificationsList.count == 0) {
                notificationsTableView.isHidden = true
                watermarkView.isHidden = false
                self.navigationItem.rightBarButtonItem = nil
            }
        }
        else {
            self.showTopMessage(message: "Error deleting notification. Please try again", type: .Error)
        }
    }
    
    func showConfirmationView() {
        deleteView.layer.cornerRadius = 20.0
        deleteHolderView.frame = CGRect(x: 0, y: 0, width: self.view.frame.width, height: self.view.frame.height)
        self.view.addSubview(deleteHolderView)
    }
    
    @IBAction func btnYesAction(_ sender: UIButton) {
        deleteHolderView.removeFromSuperview()
       // deleteNotification(notification: notificationsList[selectedRowIndex])
    }
    
    @IBAction func btnNoAction(_ sender: UIButton) {
        deleteHolderView.removeFromSuperview()
    }
    
    @IBAction func btnClearAction(_ sender: UIBarButtonItem) {
        self.displayAlert(msg: "Are you sure you want to clear all notifications?", ok: "Yes", cancel: "No", okAction: {
            self.clearAllNotifications()
        }, cancelAction: nil)
    }
}


// UITableView Delegate methods
extension NotificationsViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return notificationsList.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        var cell: NotificationsViewCell! = tableView.dequeueReusableCell(withIdentifier: "NotificationsViewCell") as? NotificationsViewCell
        
        if cell == nil {
            tableView.register(UINib(nibName: "NotificationsViewCell", bundle: nil), forCellReuseIdentifier: "NotificationsViewCell")
            cell = tableView.dequeueReusableCell(withIdentifier: "NotificationsViewCell") as? NotificationsViewCell
        }
        cell.delegate = self
        cell.setCellData(notification: notificationsList[indexPath.row])
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let notification: Notification.ViewModel = notificationsList[indexPath.row]
        if let userProfileVC = UserProfileViewController.instance() {
            userProfileVC.userId = notification.notificationUserId!
            self.navigationController?.pushViewController(userProfileVC, animated: true)
        }
    }
    
    func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {
        if editingStyle == .delete {
            selectedRowIndex = indexPath.row
            showConfirmationView()
        }
    }
}

//NotificationsViewCellProtocol methods
extension NotificationsViewController: NotificationsViewCellProtocol {
    
    func messageUser(notification: Notification.ViewModel) {
        if let chatVC = ChatViewController.instance() {
            let connection = Connection.ViewModel.init(dictionary: ["user_id": notification.notificationUserId!, "user_name": notification.userName!, "user_image": notification.userImage!])
            chatVC.setConnection(connection: connection!)
            self.navigationController?.pushViewController(chatVC, animated: true)
        }
    }
    
    func showUser(notification: Notification.ViewModel) {
        if let userProfileVC = UserProfileViewController.instance() {
            userProfileVC.userId = notification.notificationUserId!
            self.navigationController?.pushViewController(userProfileVC, animated: true)
        }
    }
}

extension NotificationsViewController: NotificationsDisplayLogic {
    func didReceiveNotificationsResponse(response: [Notification.ViewModel]?, message: String, successCode: String) {
        self.notificationsTableView.cr.endHeaderRefresh()
        if successCode == "1" {
            print(message)
            if let data = response {
                notificationsList.removeAll()
                self.notificationsList.append(contentsOf: data)
                notificationsTableView.reloadData()
            }
        } else {
            //self.showTopMessage(message: message, type: .Error)
            notificationsList.removeAll()
            notificationsTableView.reloadData()
        }
    }
}
