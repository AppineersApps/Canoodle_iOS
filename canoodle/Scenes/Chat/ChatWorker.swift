//
//  ChatWorker.swift
//  MadCollab
//
//  Created by Appineers India on 17/05/20.
//  Copyright (c) 2020 hb. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class ChatWorker
{
    func sendMessage(request: SendMessage.Request, completionHandler: @escaping ( _ message: String?, _ successCode: String?) -> Void) {
        NetworkService.dataRequest(with: MessageAPIRouter.sendMessage(request: request)) { (responce: WSResponse<SendMessage.Response>?, error: NetworkError?) in
            if let detail = responce {
                if  detail.arrayData != nil, let success = detail.setting?.isSuccess, let msg = detail.setting?.message, success {
                    completionHandler( msg, detail.setting?.success)
                } else {
                    completionHandler(detail.setting?.message, detail.setting?.success)
                }
            } else {
                completionHandler(error?.erroMessage(), "0")
            }
        }
    }
    
    func deleteMessage(request: DeleteMessage.Request, completionHandler: @escaping ( _ message: String?, _ successCode: String?) -> Void) {
      NetworkService.dataRequest(with: GetMessageAPIRouter.deleteMessage(request: request)) { (responce: WSResponse<DeleteMessage.Response>?, error: NetworkError?) in
          if let detail = responce {
              if  detail.arrayData != nil, let success = detail.setting?.isSuccess, let msg = detail.setting?.message, success {
                  completionHandler( msg, detail.setting?.success)
              } else {
                  completionHandler(detail.setting?.message, detail.setting?.success)
              }
          } else {
              completionHandler(error?.erroMessage(), "0")
          }
      }
    }
    
    func blockUser(request: BlockUser.Request, completionHandler: @escaping ( _ message: String?, _ successCode: String?) -> Void) {
        NetworkService.dataRequest(with: BlockUserAPIRouter.blockUser(request: request)) { (responce: WSResponse<BlockUser.Response>?, error: NetworkError?) in
            if let detail = responce {
                if  detail.arrayData != nil, let success = detail.setting?.isSuccess, let msg = detail.setting?.message, success {
                    completionHandler( msg, detail.setting?.success)
                } else {
                    completionHandler(detail.setting?.message, detail.setting?.success)
                }
            } else {
                completionHandler(error?.erroMessage(), "0")
            }
        }
    }
}
